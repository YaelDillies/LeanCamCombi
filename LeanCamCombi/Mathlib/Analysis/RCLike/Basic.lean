import Mathlib.Analysis.RCLike.Basic

open Bornology Metric Set
open scoped Topology

variable {G K : Type*} [SeminormedAddCommGroup G] [TopologicalAddGroup G] [RCLike K] {s : Set G}

theorem AddMonoidHom.continuous_of_isBounded_nhds_zero (f : G ‚Üí+ K) (hs : s ‚àà ùìù (0 : G))
    (hbounded : IsBounded (f '' s)) : Continuous f := by
  obtain ‚ü®Œ¥, hŒ¥, hUŒµ‚ü© := Metric.mem_nhds_iff.mp hs
  obtain ‚ü®C, hC‚ü© := (isBounded_iff_subset_ball 0).1 (hbounded.subset <| image_subset f hUŒµ)
  refine continuous_of_continuousAt_zero _ (continuousAt_iff.2 fun Œµ (hŒµ : _ < _) => ?_)
  simp only [dist_zero_right, _root_.map_zero, exists_prop]
  simp only [subset_def, mem_image, mem_ball, dist_zero_right, forall_exists_index, and_imp,
    forall_apply_eq_imp_iff‚ÇÇ] at hC
  have hC‚ÇÄ : 0 < C := (norm_nonneg _).trans_lt <| hC 0 (by simpa)
  obtain ‚ü®n, hn‚ü© := exists_nat_gt (C / Œµ)
  have hnpos : 0 < (n : ‚Ñù) := (div_pos hC‚ÇÄ hŒµ).trans hn
  refine ‚ü®Œ¥ / n, div_pos hŒ¥ hnpos, fun {x} hxŒ¥ => ?_‚ü©
  have h2 : f (n ‚Ä¢ x) = n ‚Ä¢ f x := map_nsmul f _ _
  have hn' : (n : K) ‚â† 0 := Nat.cast_ne_zero.2 (by rintro rfl; simp at hnpos)
  simp_rw [nsmul_eq_mul, mul_comm (n : K), ‚Üê div_eq_iff hn'] at h2
  replace hxŒ¥ : ‚Äñn ‚Ä¢ x‚Äñ < Œ¥ := by
    refine norm_nsmul_le.trans_lt ?_
    simpa only [norm_mul, Real.norm_natCast, lt_div_iff‚ÇÄ hnpos, mul_comm] using hxŒ¥
  rw [‚Üê h2, norm_div, RCLike.norm_natCast, div_lt_iff‚ÇÄ' hnpos]
  rw [div_lt_iff‚ÇÄ hŒµ] at hn
  exact (hC _ hxŒ¥).trans hn
