/-
Copyright (c) 2022 Mantas Bak≈°ys. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mantas Bak≈°ys
-/
import LeanCamCombi.Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar

/-!
# Cauchy's Functional Equation

This file contains the classical results about the Cauchy's functional equation
`f (x + y) = f x + f y` for functions `f : ‚Ñù ‚Üí ‚Ñù`. In this file, we prove that the solutions to this
equation are linear up to the case when `f` is a Lebesgue measurable functions, while also deducing
intermediate well-known variants.
-/

open AddMonoidHom Bornology MeasureTheory MeasureTheory.Measure Metric NNReal Set

open scoped Pointwise Topology

section SeminormedGroup

open TopologicalSpace

variable {G H : Type*} [SeminormedAddCommGroup G] [TopologicalAddGroup G] [RCLike H] {s : Set G}

theorem AddMonoidHom.continuous_of_isBounded_nhds_zero (f : G ‚Üí+ H) (hs : s ‚àà ùìù (0 : G))
    (hbounded : IsBounded (f '' s)) : Continuous f := by
  obtain ‚ü®Œ¥, hŒ¥, hUŒµ‚ü© := Metric.mem_nhds_iff.mp hs
  obtain ‚ü®C, hC‚ü© := (isBounded_iff_subset_ball 0).1 (hbounded.subset <| image_subset f hUŒµ)
  refine continuous_of_continuousAt_zero _ (continuousAt_iff.2 fun Œµ (hŒµ : _ < _) => ?_)
  simp only [dist_zero_right, _root_.map_zero, exists_prop]
  simp only [subset_def, mem_image, mem_ball, dist_zero_right, forall_exists_index, and_imp,
    forall_apply_eq_imp_iff‚ÇÇ] at hC
  have hC‚ÇÄ : 0 < C := (norm_nonneg _).trans_lt <| hC 0 (by simpa)
  obtain ‚ü®n, hn‚ü© := exists_nat_gt (C / Œµ)
  have hnpos : 0 < (n : ‚Ñù) := (div_pos hC‚ÇÄ hŒµ).trans hn
  refine ‚ü®Œ¥ / n, div_pos hŒ¥ hnpos, fun {x} hxŒ¥ => ?_‚ü©
  have h2 : f (n ‚Ä¢ x) = n ‚Ä¢ f x := map_nsmul f _ _
  have hn' : (n : H) ‚â† 0 := Nat.cast_ne_zero.2 (by rintro rfl; simp at hnpos)
  simp_rw [nsmul_eq_mul, mul_comm (n : H), ‚Üê div_eq_iff hn'] at h2
  replace hxŒ¥ : ‚Äñn ‚Ä¢ x‚Äñ < Œ¥ := by
    refine norm_nsmul_le.trans_lt ?_
    simpa only [norm_mul, Real.norm_natCast, lt_div_iff‚ÇÄ hnpos, mul_comm] using hxŒ¥
  rw [‚Üê h2, norm_div, RCLike.norm_natCast, div_lt_iff‚ÇÄ' hnpos]
  rw [div_lt_iff‚ÇÄ hŒµ] at hn
  exact (hC _ hxŒ¥).trans hn

end SeminormedGroup

variable {Œπ : Type*} [Fintype Œπ] {s : Set ‚Ñù} {a : ‚Ñù}

local notation "‚Ñù‚Åø" => Œπ ‚Üí ‚Ñù

theorem AddMonoidHom.measurable_of_continuous (f : ‚Ñù ‚Üí+ ‚Ñù) (h : Measurable f) : Continuous f :=
  let ‚ü®s, hs, hbdd‚ü© := h.exists_nhds_zero_isBounded f
  f.continuous_of_isBounded_nhds_zero hs hbdd

-- do we want this one and where would it go?
theorem isLinearMap_iff_apply_eq_apply_one_mul {M : Type} [CommSemiring M] (f : M ‚Üí+ M) :
    IsLinearMap M f ‚Üî ‚àÄ x : M, f x = f 1 * x := by
  refine ‚ü®fun h x => ?_, fun h => ‚ü®map_add f, fun c x => ?_‚ü©‚ü©
  ¬∑ convert h.2 x 1 using 1
    ¬∑ simp only [Algebra.id.smul_eq_mul, mul_one]
    ¬∑ simp only [mul_comm, Algebra.id.smul_eq_mul]
  ¬∑ rw [smul_eq_mul, smul_eq_mul, h (c * x), h x, ‚Üê mul_assoc, mul_comm _ c, mul_assoc]

theorem is_linear_rat (f : ‚Ñù ‚Üí+ ‚Ñù) (q : ‚Ñö) : f q = f 1 * q := by
  have := map_ratCast_smul f ‚Ñö ‚Ñö q (1 : ‚Ñù)
  simpa [mul_comm] using this

theorem additive_isBounded_of_isBounded_on_interval (f : ‚Ñù ‚Üí+ ‚Ñù) (hs : s ‚àà ùìù a)
    (h : IsBounded (f '' s)) : ‚àÉ V, V ‚àà ùìù (0 : ‚Ñù) ‚àß IsBounded (f '' V) := by
  rcases Metric.mem_nhds_iff.mp hs with ‚ü®Œ¥, hŒ¥, hŒ¥a‚ü©
  refine ‚ü®ball 0 Œ¥, ball_mem_nhds 0 hŒ¥, ?_‚ü©
  rw [isBounded_iff_forall_norm_le]
  simp only [mem_image, mem_ball_zero_iff, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ]
  obtain ‚ü®M, hM‚ü© := isBounded_iff_forall_norm_le.1 h
  simp only [mem_image, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ] at hM
  refine
    ‚ü®M + M, fun x hxŒ¥ => (norm_le_add_norm_add _ <| f a).trans <| add_le_add ?_ <| hM _ <| hŒ¥a ?_‚ü©
  ¬∑ rw [‚Üê map_add f]
    exact hM _ <| hŒ¥a <| by simpa
  ¬∑ simpa [mem_ball, dist_self]

-- to generalize
theorem AddMonoidHom.continuousAt_iff_continuousAt_zero (f : ‚Ñù ‚Üí+ ‚Ñù) :
    ContinuousAt f a ‚Üî ContinuousAt f 0 where
  mp := by
    simp_rw [continuousAt_iff]
    refine forall‚ÇÇ_imp ?_
    rintro Œµ hŒµ ‚ü®Œ¥, hŒ¥‚ÇÄ, hŒ¥f‚ü©
    refine ‚ü®Œ¥, hŒ¥‚ÇÄ, fun {y} hyŒ¥ => ?_‚ü©
    replace hyŒ¥ : dist (y + a) a < Œ¥ := by simpa [dist_eq_norm] using hyŒ¥
    simpa using hŒ¥f hyŒ¥
  mpr h := (continuous_of_continuousAt_zero f h).continuousAt

theorem Continuous.isLinearMap_real (f : ‚Ñù ‚Üí+ ‚Ñù) (h : Continuous f) : IsLinearMap ‚Ñù f :=
  (f.toRealLinearMap h).toLinearMap.isLinear

theorem isLinearMap_real_of_isBounded_nhds (f : ‚Ñù ‚Üí+ ‚Ñù) (hs : s ‚àà ùìù a) (hf : IsBounded (f '' s)) :
    IsLinearMap ‚Ñù f :=
  let ‚ü®_V, hV0, hVb‚ü© := additive_isBounded_of_isBounded_on_interval f hs hf
  (f.continuous_of_isBounded_nhds_zero hV0 hVb).isLinearMap_real f

theorem MonotoneOn.isLinearMap_real (f : ‚Ñù ‚Üí+ ‚Ñù) (hs : s ‚àà ùìù a) (hf : MonotoneOn f s) :
    IsLinearMap ‚Ñù f := by
  obtain ‚ü®t, ht, h‚ü© := Metric.mem_nhds_iff.mp hs
  refine isLinearMap_real_of_isBounded_nhds f (closedBall_mem_nhds a <| half_pos ht) ?_
  replace h := (closedBall_subset_ball <| half_lt_self ht).trans h
  rw [Real.closedBall_eq_Icc] at h ‚ä¢
  have ha : a - t / 2 ‚â§ a + t / 2 := by linarith
  refine isBounded_of_bddAbove_of_bddBelow (hf.map_bddAbove h ?_) (hf.map_bddBelow h ?_)
  ¬∑ refine ‚ü®a + t / 2, ?_, h <| right_mem_Icc.2 ha‚ü©
    rw [upperBounds_Icc ha]
    exact left_mem_Ici
  ¬∑ refine ‚ü®a - t / 2, ?_, h <| left_mem_Icc.2 ha‚ü©
    rw [lowerBounds_Icc ha]
    exact right_mem_Iic
