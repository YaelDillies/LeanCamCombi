/-
Copyright (c) 2022 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathlib.Data.Finset.Sort
import Mathlib.Data.Finset.Sups
import Mathlib.Data.Fintype.Basic
import Mathlib.Order.UpperLower.Basic
import LeanCamCombi.Mathlib.Data.Finset.Basic
import LeanCamCombi.Mathlib.Order

/-!
# Set family certificates

This file defines the certificator of two families of sets. If we consider set families `ùíú` and `‚Ñ¨`
as probabilistic events, the size of the certificator `ùíú ‚ñ° ‚Ñ¨` corresponds to the probability that
`ùíú` and `‚Ñ¨` occur "disjointly".

## Main declarations

* `finset.certificator`: Certificator of two elements of a Boolean algebra
* `finset.card_certificator_le`: The Van den Berg-Kesten-Reimer inequality: The probability that `ùíú`
  and `‚Ñ¨` occur "disjointly" is less than the product of their probabilities.

## References

* D. Reimer, *Proof of the Van den Berg‚ÄìKesten Conjecture*
-/

open scoped Classical FinsetFamily

variable {Œ± : Type*}

namespace Finset
section BooleanAlgebra
variable [BooleanAlgebra Œ±] (s t u : Finset Œ±) {a : Œ±}

noncomputable def certificator : Finset Œ± :=
  (s ‚à© t).filter fun a ‚Ü¶
    ‚àÉ x y, IsCompl x y ‚àß (‚àÄ ‚¶Éb‚¶Ñ, a ‚äì x = b ‚äì x ‚Üí b ‚àà s) ‚àß ‚àÄ ‚¶Éb‚¶Ñ, a ‚äì y = b ‚äì y ‚Üí b ‚àà t

scoped[FinsetFamily] infixl:70 " ‚ñ° " => Finset.certificator

variable {s t u}

@[simp] lemma mem_certificator :
    a ‚àà s ‚ñ° t ‚Üî
      ‚àÉ x y, IsCompl x y ‚àß (‚àÄ ‚¶Éb‚¶Ñ, a ‚äì x = b ‚äì x ‚Üí b ‚àà s) ‚àß ‚àÄ ‚¶Éb‚¶Ñ, a ‚äì y = b ‚äì y ‚Üí b ‚àà t := by
  rw [certificator, mem_filter, and_iff_right_of_imp]
  rintro ‚ü®u, v, _, hu, hv‚ü©
  exact mem_inter.2 ‚ü®hu rfl, hv rfl‚ü©

lemma certificator_subset_inter : s ‚ñ° t ‚äÜ s ‚à© t := filter_subset _ _

lemma certificator_subset_disjSups : s ‚ñ° t ‚äÜ s ‚óã t := by
  simp_rw [subset_iff, mem_certificator, mem_disjSups]
  rintro x ‚ü®u, v, huv, hu, hv‚ü©
  refine' ‚ü®x ‚äì u, hu inf_right_idem.symm, x ‚äì v, hv inf_right_idem.symm,
    huv.disjoint.mono inf_le_right inf_le_right, _‚ü©
  rw [‚Üêinf_sup_left, huv.codisjoint.eq_top, inf_top_eq]

variable (s t u)

lemma certificator_comm : s ‚ñ° t = t ‚ñ° s := by
  ext s; rw [mem_certificator, exists_comm]; simp [isCompl_comm, and_comm]

lemma IsUpperSet.certificator_eq_inter (hs : IsUpperSet (s : Set Œ±)) (ht : IsLowerSet (t : Set Œ±)) :
    s ‚ñ° t = s ‚à© t := by
  refine'
    certificator_subset_inter.antisymm fun a ha ‚Ü¶ mem_certificator.2 ‚ü®a, a·∂ú, isCompl_compl, _‚ü©
  rw [mem_inter] at ha
  simp only [@eq_comm _ ‚ä•, ‚Üêsdiff_eq, inf_idem, right_eq_inf, _root_.sdiff_self, sdiff_eq_bot_iff]
  exact ‚ü®fun b hab ‚Ü¶ hs hab ha.1, fun b hab ‚Ü¶ ht hab ha.2‚ü©

lemma IsLowerSet.certificator_eq_inter (hs : IsLowerSet (s : Set Œ±)) (ht : IsUpperSet (t : Set Œ±)) :
    s ‚ñ° t = s ‚à© t := by
  refine' certificator_subset_inter.antisymm fun a ha ‚Ü¶
    mem_certificator.2 ‚ü®a·∂ú, a, isCompl_compl.symm, _‚ü©
  rw [mem_inter] at ha
  simp only [@eq_comm _ ‚ä•, ‚Üêsdiff_eq, inf_idem, right_eq_inf, _root_.sdiff_self, sdiff_eq_bot_iff]
  exact ‚ü®fun b hab ‚Ü¶ hs hab ha.1, fun b hab ‚Ü¶ ht hab ha.2‚ü©

lemma IsUpperSet.certificator_eq_disjSups (hs : IsUpperSet (s : Set Œ±))
    (ht : IsUpperSet (t : Set Œ±)) : s ‚ñ° t = s ‚óã t := by
  refine' certificator_subset_disjSups.antisymm fun a ha ‚Ü¶ mem_certificator.2 _
  obtain ‚ü®x, hx, y, hy, hxy, rfl‚ü© := mem_disjSups.1 ha
  refine' ‚ü®x, x·∂ú, isCompl_compl, _‚ü©
  simp only [inf_of_le_right, le_sup_left, right_eq_inf, ‚Üêsdiff_eq, hxy.sup_sdiff_cancel_left]
  exact ‚ü®fun b hab ‚Ü¶ hs hab hx, fun b hab ‚Ü¶ ht (hab.trans_le sdiff_le) hy‚ü©

end BooleanAlgebra

open scoped FinsetFamily

variable [DecidableEq Œ±] [Fintype Œ±] {ùíú ‚Ñ¨ ùíû : Finset (Finset Œ±)}

/-- The **Van den Berg-Kesten-Reimer Inequality**: The probability that `ùíú` and `‚Ñ¨` occur
"disjointly" is less than the product of their probabilities. -/
lemma card_certificator_le : 2 ^ Fintype.card Œ± * (ùíú ‚ñ° ‚Ñ¨).card ‚â§ ùíú.card * ‚Ñ¨.card := sorry

end Finset
